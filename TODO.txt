LMS NOW ACTIVE -- will input all books in home for bookkeeping.

Docket:
    Function implementation (stuff to fix)
        main.search_author
            returns an autofill of the first letter if in library.
            I want to return an autofill of all authors with the current input:
                Ex: type "g" return all "g%" 
        add user login for separate user interaction (i.e.: user1, user2...)
            practice rest api maybe?
        abstract.py for abstract data structure use
        Implement ADTs (BST, dictionary) for searching (for fun and practice)
            learn implementation
    Debug: library.modify
    Keep track of books at home
    Normalizing DB -- not necessary, currently. Can do for practice

-----------
*Currently Working On*:
    add a cancel main select option for if user changes mind -> return to main select      
    auto run sql insert into books table command when adding book to library    
    
-----------
Completed:
    # now reads file data correctly
    main.display_books
        currently prints only the hardcoded data 
    # now stores information in LMS.txt file and loads data into shelf list correctly
    Store book information into LMS.txt w/o overwriting
    check if information is the same:
        if so, add only the new data
    # Successful implementation:
        libaary.search_title
        library.book_titles
        library.remove_book
    # constraints added
    Add book constaints 
    # now prints all book titles for at-a-glance removal when using main.remove_book method
    main.remove_book
        show a list of all book titles to easily see which one to remove
    # now autofill and debugged after modifying. Bug was in book.py constaint for set_format.
    Implement "physical"/"digital" string when writing format data when typing "p" or "d" 
        Implement "physical"/"digital" string when writing format data when typing "p" or "d" 
        same thing for storage locations "S1" = "Shelf 1"
    # now formatted for sql implementation using csv files
    reformat LMS.txt to LMS.csv for data parsing for future DB implementation
    Convert content storage to CSV file 
        modify LMS.txt file contents = book attributes already in library
    # SQLite successfully ran and created test table with constaint
    Implement SQL DB for storage and proper bookkeeping
    choose a DB, maybe SQLite
    # DB is implemented and now executes when running books.sql query
    # commented on methods
        Commenting on functions for ease of readability and clarity
    # library.modify is now implemented 
        Implementing a libaray.modify method to update data
        main.modify 
            main.modify, library.modify is alr implemented
    # Normalized user input within library.save_to_file method to format input before saving to file (adding book to library)    
        Debug: books being added to libary are not formating attrs: format, storage_loc
            library.add/ library.load_data?
                main select 1: add book doesnt format attrs: format, storage_loc  
                    main select 8 reads unformatted user inputted information for attrs: format, storage_loc
                        not parsing/ reading file correctly? -- solved: reading file purely 
                main.display_all_books: returns enumerated books with properly formatted attrs: format, storage_loc  
    # now saves after running methods libary.add_book, library.remove_book
        auto save after adding/deleting from library   

-----------
Discarded:
    Implementing SQLite DB
        Debug: csv_to_db.py script execution -- prob input manually 
        figure out what the unknown characters are being created in db.db 
        look into database (primary ... etc) keys, constraints ...